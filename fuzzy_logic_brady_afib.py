# -*- coding: utf-8 -*-
"""Fuzzy Logic Brady_AFib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zb7a5l_FFPaBqdqBxqE3_l-gztyPeP2v
"""

pip install fuzz

pip install -U scikit-fuzzy

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# Create fuzzy input variables
heart_rate = ctrl.Antecedent(np.arange(40, 161, 1), 'heart_rate')
temperature = ctrl.Antecedent(np.arange(95, 101, 1), 'temperature')
spo2 = ctrl.Antecedent(np.arange(70, 101, 1), 'spo2')

# Create fuzzy output variables
bradycardia = ctrl.Consequent(np.arange(0, 101, 1), 'bradycardia')
normal = ctrl.Consequent(np.arange(0, 101, 1), 'normal')
atrial_fibrillation = ctrl.Consequent(np.arange(0, 101, 1), 'atrial_fibrillation')

# Define membership functions for input variables
heart_rate['bradycardia'] = fuzz.trimf(heart_rate.universe, [30, 40, 60])
heart_rate['normal'] = fuzz.trimf(heart_rate.universe, [50, 80, 110])
heart_rate['atrial_fibrillation'] = fuzz.trimf(heart_rate.universe, [100, 130, 160])

temperature['low'] = fuzz.trimf(temperature.universe, [95, 96, 97.5])
temperature['normal'] = fuzz.trimf(temperature.universe, [97, 98, 99.5])
temperature['high'] = fuzz.trimf(temperature.universe, [99, 100, 102])

spo2['low'] = fuzz.trimf(spo2.universe, [70, 80, 96])
spo2['normal'] = fuzz.trimf(spo2.universe, [95, 97.5, 100])

# Define membership functions for output variables
bradycardia['probability'] = (1-fuzz.trapmf(bradycardia.universe, [0, 0, 0, 100]))
normal['probability'] = fuzz.trapmf(atrial_fibrillation.universe, [0, 45.5, 50, 100])
atrial_fibrillation['probability'] = fuzz.trapmf(atrial_fibrillation.universe, [0, 0, 0, 100])

# Define rules
rule1 = ctrl.Rule(heart_rate['bradycardia'] & temperature['low'] & spo2['low'], bradycardia['probability'])
rule2 = ctrl.Rule(heart_rate['bradycardia'] & temperature['normal'] & spo2['low'], bradycardia['probability'])

rule3 = ctrl.Rule(heart_rate['bradycardia'] & temperature['low'] & spo2['normal'], normal['probability'])
rule4 = ctrl.Rule(heart_rate['bradycardia'] & temperature['normal'] & spo2['normal'], normal['probability'])
rule5 = ctrl.Rule(heart_rate['bradycardia'] & temperature['high'] & spo2['normal'], normal['probability'])
rule6 = ctrl.Rule(heart_rate['normal'] & temperature['low'] & spo2['normal'], normal['probability'])
rule7 = ctrl.Rule(heart_rate['normal'] & temperature['normal'] & spo2['normal'], normal['probability'])
rule8 = ctrl.Rule(heart_rate['normal'] & temperature['high'] & spo2['normal'], normal['probability'])
rule9 = ctrl.Rule(heart_rate['atrial_fibrillation'] & temperature['low'] & spo2['normal'], normal['probability'])
rule10 = ctrl.Rule(heart_rate['atrial_fibrillation'] & temperature['normal'] & spo2['normal'], normal['probability'])
rule11= ctrl.Rule(heart_rate['atrial_fibrillation'] & temperature['high'] & spo2['normal'], normal['probability'])

rule12 = ctrl.Rule(heart_rate['atrial_fibrillation'] & temperature['normal'] & spo2['low'], atrial_fibrillation['probability'])
rule13 = ctrl.Rule(heart_rate['atrial_fibrillation'] & temperature['high'] & spo2['low'], atrial_fibrillation['probability'])


# Create a control system and view the rules
bradycardia_ctrl = ctrl.ControlSystem([rule1,rule2])
normal_ctrl = ctrl.ControlSystem([rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11])
atrial_fibrillation_ctrl = ctrl.ControlSystem([rule12, rule13])

bradycardia_sim = ctrl.ControlSystemSimulation(bradycardia_ctrl)
normal_sim = ctrl.ControlSystemSimulation(normal_ctrl)
atrial_fibrillation_sim = ctrl.ControlSystemSimulation(atrial_fibrillation_ctrl)

# Input values within the defined range
hr_value = float(input("Enter the heart rate: "))
temp_value = float(input("Enter the temperature: "))
spo2_value = float(input("Enter the SpO2 levels: "))

while(spo2_value <= 95):
  if (40<=hr_value<=60):
    bradycardia_sim.input['heart_rate'] = hr_value
    bradycardia_sim.input['temperature'] = temp_value
    bradycardia_sim.input['spo2'] = spo2_value
    bradycardia_sim.compute()
    bradycardia_prob = bradycardia_sim.output['bradycardia']
    print("Probability of Bradycardia:", bradycardia_prob)

  elif (100<=hr_value<=160):
    atrial_fibrillation_sim.input['heart_rate'] = hr_value
    atrial_fibrillation_sim.input['temperature'] = temp_value
    atrial_fibrillation_sim.input['spo2'] = spo2_value
    atrial_fibrillation_sim.compute()
    atrial_fibrillation_prob = atrial_fibrillation_sim.output['atrial_fibrillation']
    print("Probability of Atrial Fibrillation:", atrial_fibrillation_prob)
  break

while(spo2_value > 95):
  normal_sim.input['heart_rate'] = hr_value
  normal_sim.input['temperature'] = temp_value
  normal_sim.input['spo2'] = spo2_value
  normal_sim.compute()
  normal_prob = normal_sim.output['normal']
  print("Probability of Normal Heart:", normal_prob)
  break

import numpy as np
import matplotlib.pyplot as plt
import skfuzzy as fuzz

# Heart rate universe
heart_rate = np.arange(0, 200, 1)

# Fuzzy sets for heart rate
bradycardia = fuzz.trimf(heart_rate, [30, 40, 60])
normal_hr = fuzz.trimf(heart_rate, [50, 80, 110])
atrial_fibrillation = fuzz.trimf(heart_rate, [100, 130, 160])

# Temperature universe
temperature = np.arange(94, 104, 0.1)

# Fuzzy sets for temperature
low_temp = fuzz.trimf(temperature, [95, 96, 97.5])
normal_temp = fuzz.trimf(temperature, [97, 98, 99.5])
high_temp = fuzz.trimf(temperature, [99, 100, 102])

# Spo2 universe
spo2 = np.arange(50, 110, 1)

# Fuzzy sets for Spo2
low_spo2 = fuzz.trimf(spo2, [70, 80, 96])
normal_spo2 = fuzz.trimf(spo2, [95, 97.5, 100])

# Plotting heart rate membership functions
plt.figure(figsize=(10, 6))

plt.subplot(311)
plt.title('Heart Rate Membership Functions')
plt.plot(heart_rate, bradycardia, label='Low')
plt.plot(heart_rate, normal_hr, label='Normal')
plt.plot(heart_rate, atrial_fibrillation, label='High')
plt.xlabel('Heart Rate')
plt.ylabel('Membership')
plt.legend()

# Plotting temperature membership functions
plt.subplot(312)
plt.title('Temperature Membership Functions')
plt.plot(temperature, low_temp, label='Low')
plt.plot(temperature, normal_temp, label='Normal')
plt.plot(temperature, high_temp, label='High')
plt.xlabel('Temperature')
plt.ylabel('Membership')
plt.legend()

# Plotting Spo2 membership functions
plt.subplot(313)
plt.title('SpO2 Membership Functions')
plt.plot(spo2, low_spo2, label='Low')
plt.plot(spo2, normal_spo2, label='Normal')
plt.xlabel('SpO2')
plt.ylabel('Membership')
plt.legend()

plt.tight_layout()
plt.show()